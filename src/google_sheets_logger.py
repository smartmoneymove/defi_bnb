# src/google_sheets_logger.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –≤ Google Sheets.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ web3.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞.
"""

import os
import json
import gspread
from datetime import datetime
from decimal import Decimal
from pathlib import Path
from web3 import Web3
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class SheetLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –≤ Google Sheets.
    
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ:
    - –í—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    - –¶–µ–Ω–µ BTC –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    - –û–±—â–µ–º –±–∞–ª–∞–Ω—Å–µ –∞–∫—Ç–∏–≤–æ–≤ (cbbtc + usdc + cake)
    - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–∞—Å–∞—Ö
    """
    
    def __init__(self, spreadsheet_id: str, wallet_address: str, service_account_path: str = "service-account.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ Google Sheets.
        
        Args:
            spreadsheet_id: ID Google —Ç–∞–±–ª–∏—Ü—ã
            wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞)
            service_account_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        self.spreadsheet_id = spreadsheet_id
        self.wallet_address = wallet_address
        self.worksheet_name = wallet_address  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        self.worksheet = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
        self.w3 = Web3(Web3.HTTPProvider(os.getenv("RPC_URL")))
        if not self.w3.is_connected():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC —É–∑–ª—É")
        
        # –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env –¥–ª—è BNB Chain
        self.usdt_address = os.getenv("TOKEN_1_ADDRESS")  # USDT –Ω–∞ BNB Chain
        self.btcb_address = os.getenv("TOKEN_2_ADDRESS")  # BTCB –Ω–∞ BNB Chain 
        self.cake_address = os.getenv("CAKE_ADDRESS")
        self.pool_address = os.getenv("POOL_ADDRESS")
        self.wallet_address = os.getenv("WALLET_ADDRESS")
        
        # ABI –¥–ª—è ERC-20 —Ç–æ–∫–µ–Ω–æ–≤ (–±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        self.erc20_abi = [
            {
                "constant": True,
                "inputs": [{"name": "_owner", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"name": "balance", "type": "uint256"}],
                "type": "function"
            },
            {
                "constant": True,
                "inputs": [],
                "name": "decimals",
                "outputs": [{"name": "", "type": "uint8"}],
                "type": "function"
            }
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ABI –¥–ª—è –ø—É–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–∫–∞–∫ –≤ liquidity_manager.py)
        try:
            pool_abi_path = os.getenv("POOL_ABI_FILENAME", "PancakeswapV3Pool.json")
            project_root = Path(__file__).resolve().parent.parent
            pool_abi_full_path = str(project_root / 'src' / 'abi' / pool_abi_path)
            
            with open(pool_abi_full_path, 'r') as f:
                self.pool_abi = json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ABI –ø—É–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π: {e}")
            # Fallback ABI —Ç–æ–ª—å–∫–æ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π slot0
            self.pool_abi = [
                {
                    "inputs": [],
                    "name": "slot0",
                    "outputs": [
                        {"internalType": "uint160", "name": "sqrtPriceX96", "type": "uint160"},
                        {"internalType": "int24", "name": "tick", "type": "int24"},
                        {"internalType": "uint16", "name": "observationIndex", "type": "uint16"},
                        {"internalType": "uint16", "name": "observationCardinality", "type": "uint16"},
                        {"internalType": "uint16", "name": "observationCardinalityNext", "type": "uint16"},
                        {"internalType": "uint8", "name": "feeProtocol", "type": "uint8"},
                        {"internalType": "bool", "name": "unlocked", "type": "bool"}
                    ],
                    "stateMutability": "view",
                    "type": "function"
                }
            ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
        self._init_google_sheets(service_account_path)
    
    def _init_google_sheets(self, service_account_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.
        
        Args:
            service_account_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets API
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            creds = Credentials.from_service_account_file(service_account_path, scopes=scope)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç gspread
            self.gc = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ ID
            self.spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞
            try:
                self.worksheet = self.spreadsheet.worksheet(self.worksheet_name)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç: {self.worksheet_name}")
            except gspread.WorksheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞
                print(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {self.worksheet_name}")
                self.worksheet = self.spreadsheet.add_worksheet(
                    title=self.worksheet_name, 
                    rows=1000, 
                    cols=10
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                self._setup_worksheet_headers()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {self.worksheet_name}")
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets: {self.spreadsheet_id} -> {self.worksheet_name}")
            
        except Exception as e:
            raise ConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    
    def _setup_worksheet_headers(self):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –Ω–æ–≤–æ–º –ª–∏—Å—Ç–µ.
        """
        try:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            headers = [
                "–°—Ç–∞—Ä—Ç",           # A - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                "–§–∏–Ω–∏—à",           # B - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è  
                "–ß–∞—Å–æ–≤",           # C - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
                "BTC, —Å—Ç–∞—Ä—Ç",      # D - –¶–µ–Ω–∞ BTC –Ω–∞ –Ω–∞—á–∞–ª–æ
                "BTC, —Ñ–∏–Ω–∏—à",      # E - –¶–µ–Ω–∞ BTC –Ω–∞ –∫–æ–Ω–µ—Ü
                "–°—É–º–º–∞ —Å—Ç–∞—Ä—Ç",     # F - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –Ω–∞—á–∞–ª–æ
                "–°—É–º–º–∞ —Ñ–∏–Ω–∏—à",     # G - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–æ–Ω–µ—Ü
                "–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫",  # H - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ BTC %", # I - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC –≤ %
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"      # J - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            self.worksheet.update('A1:J1', [headers])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
            self.worksheet.format('A1:J1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
            })
            
            print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
    
    def _get_btc_price(self) -> Decimal:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTCB –≤ USD –∏–∑ –ø—É–ª–∞ PancakeSwap V3.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ liquidity_manager.py
        
        Returns:
            Decimal: –¶–µ–Ω–∞ BTCB –≤ USD
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—É–ª–∞
            pool_contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(self.pool_address),
                abi=self.pool_abi
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ slot0 (—Å–æ–¥–µ—Ä–∂–∏—Ç sqrtPriceX96)
            slot0_data = pool_contract.functions.slot0().call()
            sqrt_price_x96 = slot0_data[0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ liquidity_manager.py
            if sqrt_price_x96 == 0:
                raise ValueError("sqrt_price_x96 –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é.")
            
            # raw_val_assuming_t0_per_t1 = (sqrtPriceX96 / 2**96)**2
            # –≠—Ç–æ P_raw_USDT_per_BTCB (—Ç–∞–∫ –∫–∞–∫ pool T0=USDT, T1=BTCB)
            raw_val_interpreted_as_t0_per_t1 = (Decimal(sqrt_price_x96) / Decimal(2**96))**2
            
            if raw_val_interpreted_as_t0_per_t1 == 0:
                raise ValueError("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—ã—Ä–∞—è —Ü–µ–Ω–∞ T0/T1 —Ä–∞–≤–Ω–∞ –Ω—É–ª—é.")

            # human_price P_T1/T0 = (1 / P_raw_T0/T1) * 10^(D1 - D0)
            # –û–±–∞ —Ç–æ–∫–µ–Ω–∞ –∏–º–µ—é—Ç 18 decimals –Ω–∞ BNB Chain
            human_price = (Decimal(1) / raw_val_interpreted_as_t0_per_t1) * \
                          (Decimal(10)**(18 - 18))  # BTCB decimals - USDT decimals = 1
            
            return human_price
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTC: {e}")
            return Decimal("100000")  # Fallback —Ü–µ–Ω–∞
    
    def _get_token_balance(self, token_address: str, decimals: int = 18) -> Decimal:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ.
        
        Args:
            token_address: –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞
            decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            Decimal: –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –≤ human-readable —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            token_contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=self.erc20_abi
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ raw —Ñ–æ—Ä–º–∞—Ç–µ
            balance_raw = token_contract.functions.balanceOf(
                Web3.to_checksum_address(self.wallet_address)
            ).call()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ human-readable —Ñ–æ—Ä–º–∞—Ç
            balance = Decimal(balance_raw) / (Decimal(10) ** decimals)
            
            return balance
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ {token_address}: {e}")
            return Decimal("0")
    
    def _get_total_balance(self) -> Decimal:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ (cbbtc + usdc + cake) –≤ USD.
        
        Returns:
            Decimal: –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USD
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BTCB
            btc_price = self._get_btc_price()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ (–≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç 18 decimals –Ω–∞ BNB Chain)
            usdt_balance = self._get_token_balance(self.usdt_address, 18)  # USDT –∏–º–µ–µ—Ç 18 decimals
            btcb_balance = self._get_token_balance(self.btcb_address, 18)  # BTCB –∏–º–µ–µ—Ç 18 decimals
            cake_balance = self._get_token_balance(self.cake_address, 18)  # CAKE –∏–º–µ–µ—Ç 18 decimals
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
            # CAKE –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –ø–æ —Ü–µ–Ω–µ 0 (–Ω–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã)
            total_value = usdt_balance + (btcb_balance * btc_price)
            
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å BTCB: {btcb_balance:.8f} (${btcb_balance * btc_price:.2f})")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å CAKE: {cake_balance:.2f}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}")
            
            return total_value
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return Decimal("0")
    
    def _get_current_datetime(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        """
        now = datetime.now()
        return now.strftime("%d.%m.%Y %H:%M")
    
    def _format_number_for_sheets(self, number: Decimal, decimal_places: int = 2) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets —Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏.
        
        Args:
            number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            decimal_places: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π
        """
        return f"{number:.{decimal_places}f}".replace('.', ',')
    
    def _format_duration_hours(self, duration_hours: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö —Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏.
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - 30 –º–∏–Ω—É—Ç = 0.5 —á–∞—Å–∞ -> "0,50"
        - 20 –º–∏–Ω—É—Ç = 0.33 —á–∞—Å–∞ -> "0,33" 
        - 2 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç = 2.25 —á–∞—Å–∞ -> "2,25"
        - 1 —á–∞—Å 45 –º–∏–Ω—É—Ç = 1.75 —á–∞—Å–∞ -> "1,75"
        
        Args:
            duration_hours: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∑–∞–ø—è—Ç–æ–π
        """
        return f"{duration_hours:.2f}".replace('.', ',')
    
    def _parse_number_from_sheets(self, number_str: str) -> Decimal:
        """
        –ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –∏–∑ Google Sheets, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –∑–∞–ø—è—Ç—ã–µ –≤ —Ç–æ—á–∫–∏.
        
        Args:
            number_str: –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ)
            
        Returns:
            Decimal: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        """
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            normalized_str = str(number_str).replace(',', '.')
            return Decimal(normalized_str)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞ '{number_str}': {e}")
            return Decimal("0")
    
    def _find_first_empty_row(self) -> int:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ.
        
        Returns:
            int: –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A
            column_a = self.worksheet.col_values(1)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É
            for i, cell_value in enumerate(column_a, 1):
                if not cell_value.strip():
                    return i
            
            # –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
            return len(column_a) + 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏: {e}")
            return 1  # Fallback –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    
    def log_start(self) -> int:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ Google Sheets.
        
        Returns:
            int: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ
        """
        try:
            print("üü¢ –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            row_number = self._find_first_empty_row()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_datetime = self._get_current_datetime()
            btc_price = self._get_btc_price()
            total_balance = self._get_total_balance()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            # –°—Ç–æ–ª–±–µ—Ü A (–°—Ç–∞—Ä—Ç): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            self.worksheet.update_cell(row_number, 1, current_datetime)
            
            # –°—Ç–æ–ª–±–µ—Ü D (BTC, —Å—Ç–∞—Ä—Ç): –¶–µ–Ω–∞ BTC (—Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏)
            self.worksheet.update_cell(row_number, 4, self._format_number_for_sheets(btc_price))
            
            # –°—Ç–æ–ª–±–µ—Ü F (–°—É–º–º–∞ —Å—Ç–∞—Ä—Ç): –û–±—â–∞—è —Å—É–º–º–∞ (—Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏)
            self.worksheet.update_cell(row_number, 6, self._format_number_for_sheets(total_balance))
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É {row_number}")
            print(f"   –í—Ä–µ–º—è: {current_datetime}")
            print(f"   –¶–µ–Ω–∞ BTC: ${btc_price:.2f}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: ${total_balance:.2f}")
            
            return row_number
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")
            raise
    
    def log_finish(self, row_number: int) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ Google Sheets.
        
        Args:
            row_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        """
        try:
            print("‚è∞ –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_datetime = self._get_current_datetime()
            btc_price = self._get_btc_price()
            total_balance = self._get_total_balance()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            # –°—Ç–æ–ª–±–µ—Ü B (–§–∏–Ω–∏—à): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            self.worksheet.update_cell(row_number, 2, current_datetime)
            
            # –°—Ç–æ–ª–±–µ—Ü E (BTC, —Ñ–∏–Ω–∏—à): –¶–µ–Ω–∞ BTC (—Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏)
            self.worksheet.update_cell(row_number, 5, self._format_number_for_sheets(btc_price))
            
            # –°—Ç–æ–ª–±–µ—Ü G (–°—É–º–º–∞ —Ñ–∏–Ω–∏—à): –û–±—â–∞—è —Å—É–º–º–∞ (—Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏)
            self.worksheet.update_cell(row_number, 7, self._format_number_for_sheets(total_balance))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            try:
                # –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                start_time_str = self.worksheet.cell(row_number, 1).value
                finish_time_str = self.worksheet.cell(row_number, 2).value
                
                if start_time_str and finish_time_str:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≥–æ–¥–∞
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ (2025)
                        start_time = datetime.strptime(start_time_str, "%d.%m.%Y %H:%M")
                        finish_time = datetime.strptime(finish_time_str, "%d.%m.%Y %H:%M")
                    except ValueError:
                        try:
                            # –ü—Ä–æ–±—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ (25) –∏ –¥–æ–±–∞–≤–ª—è–µ–º 2000
                            start_time = datetime.strptime(start_time_str, "%d.%m.%y %H:%M")
                            finish_time = datetime.strptime(finish_time_str, "%d.%m.%y %H:%M")
                        except ValueError:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: {start_time_str} –∏–ª–∏ {finish_time_str}")
                            return
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
                    duration_hours = (finish_time - start_time).total_seconds() / 3600
                    
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
                    start_balance_str = self.worksheet.cell(row_number, 6).value
                    start_btc_price_str = self.worksheet.cell(row_number, 4).value
                    
                    if start_balance_str and start_btc_price_str:
                        start_balance = self._parse_number_from_sheets(start_balance_str)
                        start_btc_price = self._parse_number_from_sheets(start_btc_price_str)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if start_balance <= 0 or start_btc_price <= 0:
                            print(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: –±–∞–ª–∞–Ω—Å={start_balance}, —Ü–µ–Ω–∞={start_btc_price}")
                            return
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                        balance_change = total_balance - start_balance
                        balance_change_pct = (balance_change / start_balance * 100) if start_balance > 0 else Decimal("0")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC
                        btc_price_change_pct = ((btc_price - start_btc_price) / start_btc_price * 100) if start_btc_price > 0 else Decimal("0")
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å –∑–∞–ø—è—Ç—ã–º–∏ –≤–º–µ—Å—Ç–æ —Ç–æ—á–µ–∫)
                        self.worksheet.update_cell(row_number, 3, self._format_duration_hours(duration_hours))  # –ß–∞—Å–æ–≤
                        
                        print(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours:.2f} —á–∞—Å–æ–≤")
                        print(f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${balance_change:.2f} ({balance_change_pct:.2f}%)")
                        print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC: {btc_price_change_pct:.2f}%")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ {row_number}")
            print(f"   –í—Ä–µ–º—è: {current_datetime}")
            print(f"   –¶–µ–Ω–∞ BTC: ${btc_price:.2f}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: ${total_balance:.2f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: {e}")
            raise


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è google_sheets_logger.py
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        logger = SheetLogger(
            spreadsheet_id="15yp8anIMPNFFqtD5p-YGlg5u8ewUHeDjluKXrCoGrYo",  # ID –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü—ã
            wallet_address="0x6BEf7820d0ec29B821f585F46F4F650F61BF3cce",    # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞)
            service_account_path="service-account.json"
        )
        
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets Logger")
        print("=" * 50)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        print("\n1. –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
        row_number = logger.log_start()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        import time
        print(f"\n2. –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        print("\n3. –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
        logger.log_finish(row_number)
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
