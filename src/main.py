import asyncio
import os
import signal
from dotenv import load_dotenv
from decimal import Decimal, getcontext
from web3 import Web3

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è Decimal –≥–ª–æ–±–∞–ª—å–Ω–æ
getcontext().prec = 36 

from liquidity_manager import LiquidityManager 
from schedule_manager import ScheduleManager, get_run_mode_choice
from google_sheets_logger import SheetLogger
from pathlib import Path

# –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_signal_received = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Google Sheets Logger
sheet_logger = None
current_work_row = None

def signal_handler(signum, frame):
    global shutdown_signal_received
    print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal.Signals(signum).name}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    shutdown_signal_received = True

def get_strategy_choice():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    print("\n=== –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨–Æ ===")
    print("1. –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3 –ø–æ–∑–∏—Ü–∏–∏ (—Ç–µ–∫—É—â–∞—è)")
    print("   ‚Ä¢ 3 –ø–æ–∑–∏—Ü–∏–∏ –ø–æ 4 —Ç–∏–∫–∞ –∫–∞–∂–¥–∞—è")
    print("   ‚Ä¢ –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞: 0.12% (12 —Ç–∏–∫–æ–≤)")
    print("   ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è + 2 –±–æ–∫–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    
    print("\n2. –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2 –ø–æ–∑–∏—Ü–∏–∏ (–Ω–æ–≤–∞—è)")
    print("   ‚Ä¢ 2 –ø–æ–∑–∏—Ü–∏–∏ –ø–æ 4 —Ç–∏–∫–∞ –∫–∞–∂–¥–∞—è")
    print("   ‚Ä¢ –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞: 0.08% (8 —Ç–∏–∫–æ–≤)")
    print("   ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤—ã—à–µ —Ü–µ–Ω—ã + –ø–æ–∑–∏—Ü–∏—è –Ω–∏–∂–µ —Ü–µ–Ω—ã")
    print("   ‚Ä¢ –ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞")
    
    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (1 –∏–ª–∏ 2): ").strip()
            if choice == "1":
                return 3
            elif choice == "2":
                return 2
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        except KeyboardInterrupt:
            print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            exit(0)


async def wait_for_next_work_period(schedule_manager):
    """–û–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    global shutdown_signal_received
    
    next_start = schedule_manager.get_next_work_start()
    if not next_start:
        print("‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        shutdown_signal_received = True
        return
    
    print(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {next_start.strftime('%Y-%m-%d %H:%M UTC')}")
    
    while not shutdown_signal_received and not schedule_manager.is_work_time():
        now = schedule_manager._get_current_utc_time()
        time_left = schedule_manager.format_time_until(next_start)
        
        print(f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: {time_left} (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now.strftime('%H:%M:%S')})")
        
        # –°–ø–∏–º 60 —Å–µ–∫—É–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        for i in range(12):  # 12 * 5 = 60 —Å–µ–∫—É–Ω–¥
            if shutdown_signal_received:
                return
            await asyncio.sleep(5)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        new_next_start = schedule_manager.get_next_work_start()
        if new_next_start and new_next_start != next_start:
            next_start = new_next_start
            print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {next_start.strftime('%Y-%m-%d %H:%M UTC')}")
    
    if not shutdown_signal_received and schedule_manager.is_work_time():
        print("üü¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥!")
        schedule_manager.print_schedule_status()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ Google Sheets
        global sheet_logger, current_work_row
        if sheet_logger:
            try:
                current_work_row = sheet_logger.log_start()
                print(f"üìä –î–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {current_work_row})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Sheets: {e}")

async def main_loop():
    global shutdown_signal_received, sheet_logger, current_work_row
    load_dotenv()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets Logger
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        spreadsheet_id = os.getenv("GOOGLE_SHEETS_ID", "15yp8anIMPNFFqtD5p-YGlg5u8ewUHeDjluKXrCoGrYo")
        wallet_address = os.getenv("WALLET_ADDRESS")
        service_account_path = os.getenv("GOOGLE_SERVICE_ACCOUNT_PATH", "service-account.json")
        
        if not wallet_address:
            print("‚ö†Ô∏è WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω –≤ .env, Google Sheets Logger –æ—Ç–∫–ª—é—á–µ–Ω")
            sheet_logger = None
        else:
            sheet_logger = SheetLogger(
                spreadsheet_id=spreadsheet_id,
                wallet_address=wallet_address,
                service_account_path=service_account_path
            )
            print(f"‚úÖ Google Sheets Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {spreadsheet_id} -> {wallet_address}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheets Logger: {e}")
        print("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        sheet_logger = None

    # --- –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
    num_positions = get_strategy_choice()
    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {num_positions} –ø–æ–∑–∏—Ü–∏–∏")

    # --- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ ---
    run_mode = get_run_mode_choice()
    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {'–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫' if run_mode == 'immediate' else '–†–∞–±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é'}")

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
    project_root = Path(__file__).resolve().parent.parent
    schedule_file = str(project_root / 'src' / 'schedule.json')
    schedule_manager = ScheduleManager(schedule_file)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
    if run_mode == "scheduled":
        schedule_manager.print_schedule_status()
        if not schedule_manager.is_work_time():
            print("\nüî¥ –°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
            await wait_for_next_work_period(schedule_manager)
            if shutdown_signal_received:
                return
    else:
        # –î–ª—è —Ä–µ–∂–∏–º–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
        print("üü¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)!")
        if sheet_logger:
            try:
                current_work_row = sheet_logger.log_start()
                print(f"üìä –î–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {current_work_row})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Sheets: {e}")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    rpc_url = os.getenv("RPC_URL")
    wallet_address = os.getenv("WALLET_ADDRESS")
    private_key = os.getenv("PRIVATE_KEY")
    pool_address = os.getenv("POOL_ADDRESS")
    
    pool_abi_filename = os.getenv("POOL_ABI_FILENAME", "PancakeswapV3Pool.json")
    pool_abi_path = str(project_root / 'src' / 'abi' / pool_abi_filename)

    # –¢–æ–∫–µ–Ω—ã –¥–ª—è BNB Chain
    token0_address = os.getenv("TOKEN_1_ADDRESS")  # USDT –Ω–∞ BNB Chain
    token1_address = os.getenv("TOKEN_2_ADDRESS")  # BTCB –Ω–∞ BNB Chain
    token0_decimals = 18  # –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç 18 decimals —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏
    token1_decimals = 18  # –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç 18 decimals —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏
    token0_symbol = "USDT"
    token1_symbol = "BTCB"
    fee_tier = int(os.getenv("FEE_TIER", "500"))
    swap_pool_fee_tier = int(os.getenv("SWAP_POOL_FEE_TIER_FOR_REBALANCE", "100"))
    
    pancakeswap_router_address = os.getenv("PANCAKESWAP_ROUTER_ADDRESS")
    farm_address = os.getenv("FARM_ADDRESS")
    farm_abi_path = str(project_root / 'src' / 'abi' / 'CakeFarm.json')

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
    if num_positions == 3:
        strategy_params = {
            'num_positions': 3,
            'position_mode': '3_positions',
            'individual_position_width_pct': Decimal('0.0004'),  # 0.04%
            'total_range_width_pct': Decimal('0.0012'),          # 0.12%
            'overlap_pct': Decimal('0.0'),                       # 0% overlap
            'rebalance_threshold_pct': Decimal('0.001'),         # 0.1%
            'central_range_weight': Decimal('1.0'),              # –†–∞–≤–Ω—ã–µ –≤–µ—Å–∞
            'side_range_weight': Decimal('1.0'),                 # –†–∞–≤–Ω—ã–µ –≤–µ—Å–∞
        }
    else:  # 2 –ø–æ–∑–∏—Ü–∏–∏
        strategy_params = {
            'num_positions': 2,
            'position_mode': '2_positions',
            'individual_position_width_pct': Decimal('0.0004'),  # 0.04% –∫–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è
            'total_range_width_pct': Decimal('0.0008'),          # 0.08% –æ–±—â–∞—è —à–∏—Ä–∏–Ω–∞
            'overlap_pct': Decimal('0.0'),                       # 0% overlap (–ø–æ–∑–∏—Ü–∏–∏ –≤–ø—Ä–∏—Ç—ã–∫)
            'rebalance_threshold_pct': Decimal('0.001'),         # 0.1%
            'position_weight': Decimal('1.0'),                   # –†–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –æ–±–µ–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        }

    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Liquidity Manager...")

    lm = LiquidityManager(
        rpc_url=rpc_url,
        signer_address=wallet_address,
        private_key=private_key,
        pool_address=pool_address, 
        pool_abi_path=pool_abi_path,
        token0_address=token0_address, 
        token1_address=token1_address,
        token0_decimals=token0_decimals, 
        token1_decimals=token1_decimals,
        token0_symbol=token0_symbol,
        token1_symbol=token1_symbol,
        fee_tier=fee_tier,
        strategy_params=strategy_params,
        pancakeswap_router_address=pancakeswap_router_address,
        farm_address=farm_address,
        farm_abi_path=farm_abi_path,
        swap_pool_fee_tier=swap_pool_fee_tier
    )

    print("Liquidity Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    iteration = 0
    while not shutdown_signal_received:
        try:
            iteration += 1
            print(f"\n=== –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ===")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
            if shutdown_signal_received:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
            if run_mode == "scheduled":
                if not schedule_manager.is_work_time():
                    print("üî¥ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
                    await schedule_manager.close_all_positions()
                    
                    # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π...")
                    await asyncio.sleep(3)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ Google Sheets
                    if sheet_logger and current_work_row:
                        try:
                            sheet_logger.log_finish(current_work_row)
                            print(f"üìä –î–∞–Ω–Ω—ã–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {current_work_row})")
                            current_work_row = None
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ Google Sheets: {e}")
                    
                    await wait_for_next_work_period(schedule_manager)
                    if shutdown_signal_received:
                        break
                    continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
            current_price, current_tick, current_liquidity = await lm.get_current_pool_state()
            print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞: —Ü–µ–Ω–∞={current_price:.2f}, —Ç–∏–∫={current_tick}, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å={current_liquidity}")
            
            if shutdown_signal_received:
                break
            
            # –£–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é (–±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
            await lm.decide_and_manage_liquidity(None)
            
            if shutdown_signal_received:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π
            await lm._update_managed_positions_status()
            await lm._print_managed_positions_status()
            
            if shutdown_signal_received:
                break
            
            
            print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            
            # –°–ø–∏–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            for i in range(12):  # 12 * 5 = 60 —Å–µ–∫—É–Ω–¥
                if shutdown_signal_received:
                    break
                await asyncio.sleep(5)
            
        except KeyboardInterrupt:
            print("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")
            shutdown_signal_received = True
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            import traceback
            traceback.print_exc()
            if shutdown_signal_received:
                break
            await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if sheet_logger and current_work_row:
        try:
            sheet_logger.log_finish(current_work_row)
            print(f"üìä –î–∞–Ω–Ω—ã–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {current_work_row})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ Google Sheets: {e}")
    
    print("–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")

async def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ asyncio
        loop = asyncio.get_running_loop()
        
        def signal_handler_async():
            global shutdown_signal_received
            print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É...")
            shutdown_signal_received = True
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è asyncio
        for sig in [signal.SIGTERM, signal.SIGINT]:
            loop.add_signal_handler(sig, signal_handler_async)
        
        await main_loop()
        
    except KeyboardInterrupt:
        print("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt –≤ main()")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ Liquidity Manager...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")