import asyncio
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
liquidity_manager_running = False
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ LiquidityManager
liquidity_manager_instance = None

class TelegramController:
    def __init__(self):
        load_dotenv()
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = int(os.getenv("TELEGRAM_CHAT_ID"))
        self.application = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è telegram
        logging.getLogger("httpx").setLevel(logging.WARNING)
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é"""
        global liquidity_manager_running
        
        if update.effective_chat.id != self.chat_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
            
        if liquidity_manager_running:
            await update.message.reply_text("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
        else:
            liquidity_manager_running = True
            await update.message.reply_text("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –ó–ê–ü–£–©–ï–ù–û")
            print("üì± Telegram: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω–æ")
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        global liquidity_manager_running
        
        if update.effective_chat.id != self.chat_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
            
        if not liquidity_manager_running:
            await update.message.reply_text("‚èπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            liquidity_manager_running = False
            await update.message.reply_text("‚è∏Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
            print("üì± Telegram: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def rebalance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /rebalance –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        global liquidity_manager_instance
        
        if update.effective_chat.id != self.chat_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        if not liquidity_manager_instance:
            await update.message.reply_text("‚ùå LiquidityManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π...")
        print("üì± Telegram: –ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price, _, _ = await liquidity_manager_instance.get_current_pool_state()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å
            await liquidity_manager_instance._perform_full_rebalance(current_price)
            
            await update.message.reply_text("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üì± Telegram: –ü–æ–ª–Ω—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–µ: {str(e)}"
            await update.message.reply_text(error_msg)
            print(f"üì± Telegram: –û—à–∏–±–∫–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∞ - {e}")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        global liquidity_manager_instance
        
        if update.effective_chat.id != self.chat_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        if not liquidity_manager_instance:
            await update.message.reply_text("‚ùå LiquidityManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        await update.message.reply_text("üî• –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –°–ë–†–û–° –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π...\n‚ö†Ô∏è –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ!")
        print("üì± Telegram: –ó–∞–ø—É—â–µ–Ω –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ multicall
            print("üì± –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π...")
            positions_to_close = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ managed_positions_slots
            for slot_idx, pos_data in enumerate(liquidity_manager_instance.managed_positions_slots):
                if pos_data and 'nft_id' in pos_data:
                    nft_id = pos_data['nft_id']
                    position_info = await liquidity_manager_instance.get_position_info(nft_id)
                    if position_info and 'error' not in position_info:
                        positions_to_close.append((slot_idx, nft_id, position_info))
                        print(f"  üì± –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: —Å–ª–æ—Ç {slot_idx}, NFT {nft_id}")
            
            # –ò—â–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            print("üì± –ü–æ–∏—Å–∫ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π...")
            orphaned_positions = await liquidity_manager_instance.find_orphaned_positions()
            for orphaned_pos in orphaned_positions:
                nft_id = orphaned_pos['nft_id']
                position_info = await liquidity_manager_instance.get_position_info(nft_id)
                if position_info and 'error' not in position_info:
                    positions_to_close.append((-1, nft_id, position_info))  # slot_id = -1 –¥–ª—è –æ—Ä—Ñ–∞–Ω–æ–≤
                    print(f"  üì± üö® –û—Å–∏—Ä–æ—Ç–µ–≤—à–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: NFT {nft_id}")
                    
            if orphaned_positions:
                await update.message.reply_text(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(orphaned_positions)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π - –æ–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã!")
            
            if positions_to_close:
                success = await liquidity_manager_instance._execute_remove_liquidity_multicall(positions_to_close)
                if not success:
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ multicall, –ø—Ä–æ–±—É—é –æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±...")
                    print("üì± Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –∑–∞–∫—Ä—ã—Ç–∏—é")
                    
                    # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ—Ç–æ–¥—É
                    for slot_idx, nft_id, pos_info in positions_to_close:
                        try:
                            await liquidity_manager_instance._execute_remove_liquidity_multicall([(slot_idx, nft_id, pos_info)])
                        except Exception as e:
                            print(f"üì± –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {nft_id}: {e}")
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            liquidity_manager_instance.managed_positions_slots = [None] * len(liquidity_manager_instance.managed_positions_slots)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            liquidity_manager_instance._save_state_to_file()
            
            await update.message.reply_text("‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüîÑ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ. –¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
            print("üì± Telegram: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {str(e)}"
            await update.message.reply_text(error_msg)
            print(f"üì± Telegram: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ - {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        if update.effective_chat.id != self.chat_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        status = "üü¢ –†–ê–ë–û–¢–ê–ï–¢" if liquidity_manager_running else "üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù"
        lm_status = "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" if liquidity_manager_instance else "‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        status_text = f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é: {status}
üîß LiquidityManager: {lm_status}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
        
        await update.message.reply_text(status_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if update.effective_chat.id != self.chat_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
            
        help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é  
/rebalance - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
/reset - –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ÑπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ /start /stop - —É–ø—Ä–∞–≤–ª—è—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ /rebalance - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
‚Ä¢ /reset - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞—á–∞–ª–æ —Å –Ω—É–ª—è)
‚Ä¢ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞ (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏)

‚ö†Ô∏è /reset –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ.
        """
        await update.message.reply_text(help_text.strip())
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not self.bot_token or not self.chat_id:
            print("‚ùå TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env")
            return False
            
        try:
            self.application = Application.builder().token(self.bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("stop", self.stop_command))
            self.application.add_handler(CommandHandler("rebalance", self.rebalance_command))
            self.application.add_handler(CommandHandler("reset", self.reset_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()
            
            print(f"üì± Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Chat ID: {self.chat_id})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            try:
                await self.application.bot.send_message(
                    chat_id=self.chat_id,
                    text="ü§ñ Telegram —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –±–æ—Ç–∞"""
        if self.application:
            try:
                await self.application.updater.start_polling(
                    allowed_updates=["message"],
                    drop_pending_updates=True
                )
                print("üì± Telegram –±–æ—Ç –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                print("üì± Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
def is_liquidity_manager_running():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–æ"""
    global liquidity_manager_running
    return liquidity_manager_running

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
def set_liquidity_manager_status(status: bool):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é"""
    global liquidity_manager_running
    liquidity_manager_running = status

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ LiquidityManager
def set_liquidity_manager_instance(lm_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä LiquidityManager"""
    global liquidity_manager_instance
    liquidity_manager_instance = lm_instance 